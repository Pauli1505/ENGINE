# This file is automatically generated by running
#
# generate-cmakelists
#
# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)
set(PROJECT_NAME my_lib-code-libjpeg)
project(${PROJECT_NAME})
# Set verbose output while testing CMake
#set(CMAKE_VERBOSE_MAKEFILE 1)
#
# Get 3rdparty configuration data (<3rdParty>Config.cmake must be in PROJECT_CMAKE_CONFIG_PATH)
# edit line below to give cmake a hint where to find a <3rdParty>Config.cmake in case of manually built
# and not properly installed 3rdParty Package
#set(<3rdParty>_DIR "/path/to/<3rdParty>Config.cmake")
#example:
#find_package(PCL 1.3 REQUIRED COMPONENTS <component_1> <component_2>)
#include_directories(${<3rdParty>_INCLUDE_DIRS})
#
# Default build type (can be overridden by user)
if (NOT CMAKE_BUILD_TYPE)
set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING
        "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
endif()
#
# Compiler definitions from main project
#
add_definitions(${PROJECT_CXX_DEFINITIONS})
#
# Add special compiler flags
#
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PROJECT_CXX_FLAGS}")

#
#list all dependent files
#
#set(SRCS src_files)
set(SRCS ${PCH_SRC} E:/ENGINE/my_lib/code/libjpeg/jaricom.c
E:/ENGINE/my_lib/code/libjpeg/jcapimin.c
E:/ENGINE/my_lib/code/libjpeg/jcapistd.c
E:/ENGINE/my_lib/code/libjpeg/jcarith.c
E:/ENGINE/my_lib/code/libjpeg/jccoefct.c
E:/ENGINE/my_lib/code/libjpeg/jccolor.c
E:/ENGINE/my_lib/code/libjpeg/jcdctmgr.c
E:/ENGINE/my_lib/code/libjpeg/jchuff.c
E:/ENGINE/my_lib/code/libjpeg/jcinit.c
E:/ENGINE/my_lib/code/libjpeg/jcmainct.c
E:/ENGINE/my_lib/code/libjpeg/jcmarker.c
E:/ENGINE/my_lib/code/libjpeg/jcmaster.c
E:/ENGINE/my_lib/code/libjpeg/jcomapi.c
E:/ENGINE/my_lib/code/libjpeg/jcparam.c
E:/ENGINE/my_lib/code/libjpeg/jcprepct.c
E:/ENGINE/my_lib/code/libjpeg/jcsample.c
E:/ENGINE/my_lib/code/libjpeg/jctrans.c
E:/ENGINE/my_lib/code/libjpeg/jdapimin.c
E:/ENGINE/my_lib/code/libjpeg/jdapistd.c
E:/ENGINE/my_lib/code/libjpeg/jdarith.c
E:/ENGINE/my_lib/code/libjpeg/jdatadst.c
E:/ENGINE/my_lib/code/libjpeg/jdatasrc.c
E:/ENGINE/my_lib/code/libjpeg/jdcoefct.c
E:/ENGINE/my_lib/code/libjpeg/jdcolor.c
E:/ENGINE/my_lib/code/libjpeg/jddctmgr.c
E:/ENGINE/my_lib/code/libjpeg/jdhuff.c
E:/ENGINE/my_lib/code/libjpeg/jdinput.c
E:/ENGINE/my_lib/code/libjpeg/jdmainct.c
E:/ENGINE/my_lib/code/libjpeg/jdmarker.c
E:/ENGINE/my_lib/code/libjpeg/jdmaster.c
E:/ENGINE/my_lib/code/libjpeg/jdmerge.c
E:/ENGINE/my_lib/code/libjpeg/jdpostct.c
E:/ENGINE/my_lib/code/libjpeg/jdsample.c
E:/ENGINE/my_lib/code/libjpeg/jdtrans.c
E:/ENGINE/my_lib/code/libjpeg/jerror.c
E:/ENGINE/my_lib/code/libjpeg/jfdctflt.c
E:/ENGINE/my_lib/code/libjpeg/jfdctfst.c
E:/ENGINE/my_lib/code/libjpeg/jfdctint.c
E:/ENGINE/my_lib/code/libjpeg/jidctflt.c
E:/ENGINE/my_lib/code/libjpeg/jidctfst.c
E:/ENGINE/my_lib/code/libjpeg/jidctint.c
E:/ENGINE/my_lib/code/libjpeg/jmemmgr.c
E:/ENGINE/my_lib/code/libjpeg/jmemnobs.c
E:/ENGINE/my_lib/code/libjpeg/jquant1.c
E:/ENGINE/my_lib/code/libjpeg/jquant2.c
E:/ENGINE/my_lib/code/libjpeg/jutils.c )
#
#
# uncomment strings bellow if you want to generate subgroups\projects
#SOURCE_GROUP(${PROJECT_NAME} ${SRCS})
#
# you may need to build plain c files with g++, example - xerces
# if it is not the common case - comment this string
#set_source_files_properties(${SRCS} PROPERTIES LANGUAGE CXX )
#
# Include directories
#
include_directories(${PROJECT_INCLUDE_DIRS})
include_directories(SYSTEM )
#
# Executable
#
#executables - NOT_SET
#
# shared lib
#
add_library(${PROJECT_NAME} SHARED ${SRCS})
ADD_NATIVE_PRECOMPILED_HEADER(${PROJECT_NAME} ${PCH_SRC_H})
#
# static libs
#
add_library(${PROJECT_NAME}-static STATIC ${SRCS})
ADD_NATIVE_PRECOMPILED_HEADER(${PROJECT_NAME}-static ${PCH_SRC_H})
#
# Target libraries
#
target_link_libraries(${PROJECT_NAME} ${PROJECT_LIBRARIES} ${PROJECT_3RD_PARTY_LIBRARIES})
set(TARGET_LOCATION ${EXECUTABLE_OUTPUT_PATH})
SET_SOURCE_FILES_PROPERTIES(${PCH_SRC_CPP} PROPERTIES COMPILE_FLAGS "${PCH_SRC_CMPL_FLAG} /Yc\"${PCH_SRC_H}\"")
