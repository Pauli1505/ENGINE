# This file is automatically generated by running
#
# generate-cmakelists
#
# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)
set(PROJECT_NAME my_lib-code-renderer2)
project(${PROJECT_NAME})
# Set verbose output while testing CMake
#set(CMAKE_VERBOSE_MAKEFILE 1)
#
# Get 3rdparty configuration data (<3rdParty>Config.cmake must be in PROJECT_CMAKE_CONFIG_PATH)
# edit line below to give cmake a hint where to find a <3rdParty>Config.cmake in case of manually built
# and not properly installed 3rdParty Package
#set(<3rdParty>_DIR "/path/to/<3rdParty>Config.cmake")
#example:
#find_package(PCL 1.3 REQUIRED COMPONENTS <component_1> <component_2>)
#include_directories(${<3rdParty>_INCLUDE_DIRS})
#
# Default build type (can be overridden by user)
if (NOT CMAKE_BUILD_TYPE)
set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING
        "Choose the type of build, options are: Debug MinSizeRel Release RelWithDebInfo." FORCE)
endif()
#
# Compiler definitions from main project
#
add_definitions(${PROJECT_CXX_DEFINITIONS})
#
# Add special compiler flags
#
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PROJECT_CXX_FLAGS}")

#
#list all dependent files
#
#set(SRCS src_files)
set(SRCS ${PCH_SRC} E:/ENGINE/my_lib/code/renderer2/stringify.c
E:/ENGINE/my_lib/code/renderer2/tr_animation.c
E:/ENGINE/my_lib/code/renderer2/tr_backend.c
E:/ENGINE/my_lib/code/renderer2/tr_bsp.c
E:/ENGINE/my_lib/code/renderer2/tr_cmds.c
E:/ENGINE/my_lib/code/renderer2/tr_curve.c
E:/ENGINE/my_lib/code/renderer2/tr_dsa.c
E:/ENGINE/my_lib/code/renderer2/tr_extensions.c
E:/ENGINE/my_lib/code/renderer2/tr_extramath.c
E:/ENGINE/my_lib/code/renderer2/tr_fbo.c
E:/ENGINE/my_lib/code/renderer2/tr_flares.c
E:/ENGINE/my_lib/code/renderer2/tr_glsl.c
E:/ENGINE/my_lib/code/renderer2/tr_image.c
E:/ENGINE/my_lib/code/renderer2/tr_image_dds.c
E:/ENGINE/my_lib/code/renderer2/tr_init.c
E:/ENGINE/my_lib/code/renderer2/tr_light.c
E:/ENGINE/my_lib/code/renderer2/tr_main.c
E:/ENGINE/my_lib/code/renderer2/tr_marks.c
E:/ENGINE/my_lib/code/renderer2/tr_mesh.c
E:/ENGINE/my_lib/code/renderer2/tr_model.c
E:/ENGINE/my_lib/code/renderer2/tr_model_iqm.c
E:/ENGINE/my_lib/code/renderer2/tr_postprocess.c
E:/ENGINE/my_lib/code/renderer2/tr_scene.c
E:/ENGINE/my_lib/code/renderer2/tr_shade.c
E:/ENGINE/my_lib/code/renderer2/tr_shader.c
E:/ENGINE/my_lib/code/renderer2/tr_shade_calc.c
E:/ENGINE/my_lib/code/renderer2/tr_shadows.c
E:/ENGINE/my_lib/code/renderer2/tr_sky.c
E:/ENGINE/my_lib/code/renderer2/tr_surface.c
E:/ENGINE/my_lib/code/renderer2/tr_vbo.c
E:/ENGINE/my_lib/code/renderer2/tr_world.c )
#
#
# uncomment strings bellow if you want to generate subgroups\projects
#SOURCE_GROUP(${PROJECT_NAME} ${SRCS})
#
# you may need to build plain c files with g++, example - xerces
# if it is not the common case - comment this string
#set_source_files_properties(${SRCS} PROPERTIES LANGUAGE CXX )
#
# Include directories
#
include_directories(${PROJECT_INCLUDE_DIRS})
include_directories(SYSTEM )
#
# Executable
#
#executables - NOT_SET
#
# shared lib
#
add_library(${PROJECT_NAME} SHARED ${SRCS})
ADD_NATIVE_PRECOMPILED_HEADER(${PROJECT_NAME} ${PCH_SRC_H})
#
# static libs
#
add_library(${PROJECT_NAME}-static STATIC ${SRCS})
ADD_NATIVE_PRECOMPILED_HEADER(${PROJECT_NAME}-static ${PCH_SRC_H})
#
# Target libraries
#
target_link_libraries(${PROJECT_NAME} ${PROJECT_LIBRARIES} ${PROJECT_3RD_PARTY_LIBRARIES})
set(TARGET_LOCATION ${EXECUTABLE_OUTPUT_PATH})
SET_SOURCE_FILES_PROPERTIES(${PCH_SRC_CPP} PROPERTIES COMPILE_FLAGS "${PCH_SRC_CMPL_FLAG} /Yc\"${PCH_SRC_H}\"")
